#!/usr/bin/env python3
"""
Demo: Test DEXScreener monitoring
–ü–æ–∫–∞–∑—É—î —è–∫ –ø—Ä–∞—Ü—é—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ DEXScreener API
"""

import asyncio
import aiohttp
import sys
from datetime import datetime

async def test_dexscreener():
    """Test DEXScreener API and show how signals are detected"""
    
    print("=" * 70)
    print("üîç –¢–ï–°–¢ DEXSCREENER –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£")
    print("=" * 70)
    print()
    
    print("üì° –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ DEXScreener API...")
    print()
    
    async with aiohttp.ClientSession() as session:
        # Test 1: Trending tokens
        print("1Ô∏è‚É£  –¢–µ—Å—Ç: Trending —Ç–æ–∫–µ–Ω–∏ (Ethereum)")
        print("-" * 70)
        
        try:
            url = "https://api.dexscreener.com/latest/dex/search?q=ethereum"
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    pairs = data.get('pairs', [])[:3]  # –¢–æ–ø 3
                    
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(pairs)} –ø–∞—Ä")
                    print()
                    
                    for i, pair in enumerate(pairs, 1):
                        token_symbol = pair.get('baseToken', {}).get('symbol', 'UNKNOWN')
                        token_address = pair.get('baseToken', {}).get('address', '')[:10]
                        price_usd = float(pair.get('priceUsd', 0) or 0)
                        liquidity = float(pair.get('liquidity', {}).get('usd', 0) or 0)
                        volume_24h = float(pair.get('volume', {}).get('h24', 0) or 0)
                        price_change = float(pair.get('priceChange', {}).get('h24', 0) or 0)
                        
                        print(f"   {i}. {token_symbol}")
                        print(f"      Address: {token_address}...")
                        print(f"      Price: ${price_usd:.6f}")
                        print(f"      Liquidity: ${liquidity:,.0f}")
                        print(f"      Volume 24h: ${volume_24h:,.0f}")
                        print(f"      Change 24h: {price_change:+.2f}%")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ–π–¥–µ —Ñ—ñ–ª—å—Ç—Ä
                        if liquidity >= 5000 and volume_24h >= 10000:
                            print(f"      ‚úÖ –ü–†–û–ô–®–û–í –§–Ü–õ–¨–¢–† - —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–≥–Ω–∞–ª!")
                        else:
                            print(f"      ‚ùå –ù–µ –ø—Ä–æ–π—à–æ–≤ —Ñ—ñ–ª—å—Ç—Ä (–ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –∞–±–æ –æ–±'—î–º –∑–∞–Ω–∏–∑—å–∫—ñ)")
                        print()
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: HTTP {resp.status}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        print()
        print("=" * 70)
        print()
        
        # Test 2: Specific token search
        print("2Ô∏è‚É£  –¢–µ—Å—Ç: –ü–æ—à—É–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω—É (WETH)")
        print("-" * 70)
        
        try:
            url = "https://api.dexscreener.com/latest/dex/tokens/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    pairs = data.get('pairs', [])[:2]  # –¢–æ–ø 2 –ø–∞—Ä–∏
                    
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(pairs)} –ø–∞—Ä –¥–ª—è WETH")
                    print()
                    
                    for i, pair in enumerate(pairs, 1):
                        dex_name = pair.get('dexId', 'unknown')
                        pair_address = pair.get('pairAddress', '')[:10]
                        liquidity = float(pair.get('liquidity', {}).get('usd', 0) or 0)
                        
                        print(f"   {i}. DEX: {dex_name}")
                        print(f"      Pair: {pair_address}...")
                        print(f"      Liquidity: ${liquidity:,.0f}")
                        print()
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: HTTP {resp.status}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        print()
        print("=" * 70)
        print()
        
        # Summary
        print("üìä –í–ò–°–ù–û–í–û–ö:")
        print("-" * 70)
        print("""
–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞—Ü—é—î —Ç–∞–∫:

1. üîÑ –ö–æ–∂–Ω—É 1 —Ö–≤–∏–ª–∏–Ω—É - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ trending —Ç–æ–∫–µ–Ω–∏
2. üîÑ –ö–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –ø–∞—Ä–∏
3. üîç –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ (‚â•$5,000) —Ç–∞ –æ–±'—î–º—É (‚â•$10,000)
4. üíæ –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –≤ MongoDB
5. üì± –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

–ü–µ—Ä–µ–≤–∞–≥–∏ DEXScreener:
‚úÖ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π
‚úÖ –ù–µ –ø–æ—Ç—Ä–µ–±—É—î RPC –∫–ª—é—á—ñ–≤
‚úÖ –ü–æ–∫—Ä–∏–≤–∞—î –≤—Å—ñ –º–µ—Ä–µ–∂—ñ (ETH, BSC, Solana)
‚úÖ –ì–æ—Ç–æ–≤—ñ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        """)
        
        print()
        print("üöÄ –©–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:")
        print("   cd /app/backend")
        print("   python bot_main.py")
        print()
        print("=" * 70)

if __name__ == "__main__":
    try:
        asyncio.run(test_dexscreener())
    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
        sys.exit(0)
